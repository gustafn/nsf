'\"
'\" Generated from file 'current\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2014-16 Stefan Sobernig <stefan\&.sobernig@wu\&.ac\&.at>, Gustaf Neumann <gustaf\&.neumann@wu\&.ac\&.at>; available under the Creative Commons Attribution 3\&.0 Austria license (CC BY 3\&.0 AT)\&.
'\"
.TH "nx::current" 3 2\&.4\&.0 current "NX API"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
nx::current \- Return information about the method callstack
.SH SYNOPSIS
\fBcurrent\fR ?\fIoption\fR?
.sp
.BE
.SH DESCRIPTION
.TP
\fBcurrent\fR ?\fIoption\fR?
This introspection command provides information about various details,
to be identified using \fIoption\fR, on the callstack\&. The command is
invoked from a method body\&. If \fIoption\fR is not provided, \fBnx::current\fR will
default to option \fBobject\fR (see
below)\&. \fBnx::current\fR operates on the Tcl callstack and is aware
of NX-specific callstack and stackframe details\&. Except for the
options \fBcallinglevel\fR and \fBlevel\fR, calling \fBnx::current\fR outside
an NX object or method will result in an error\&. \fIoption\fR can be
any of the following:
.RS
.IP \(bu
\fBactivelevel\fR returns the actual callstack level which
calls into the currently executing method directly\&. This \fBactivelevel\fR might
correspond the \fBcallinglevel\fR, but this is not necessarily
the case\&. The \fBactivelevel\fR also includes
intermediate calls, such as \fBnx::next\fR invocations\&. The level is
reported as an absolute level number (# followed by a digit) to be
directly used as the first argument to \fBuplevel\fR or \fBupvar\fR\&.
.IP \(bu
\fBargs\fR returns the list of argument values passed into the currently executing method implementation\&.
.IP \(bu
\fBcalledclass\fR returns the name of the class that provides
the method implementation to which the intercepted method call is to be redirected (only available from within filter methods)\&.
.IP \(bu
\fBcalledmethod\fR returns the original method name
requested by intercepted method call (only available from within
filter methods)\&.
.IP \(bu
\fBcallingclass\fR returns the name of the class which
provides the method implementation calling into the currently
executing method\&. See also \fBcallingobject\fR\&.
.IP \(bu
\fBcallinglevel\fR resolves the callstack level of the
originating invocation of the currently executing method
implementation\&. Callstack levels introduced by method interception
(e\&.g\&., filters) and by method combination (\fBnx::next\fR) are
ignored\&. The level is reported as an absolute level number (\fB#\fR followed
by a digit) to be directly used as the first argument to \fBuplevel\fR
or \fBupvar\fR\&. See also \fBactivelevel\fR\&. If called outside NX,
\fB1\fR is returned (which is the default for \fBupvar\fR and \fBuplevel\fR)\&.
.IP \(bu
\fBcallingobject\fR returns the name of the object which is
calling into the currently executing method\&. See also \fBcallingclass\fR\&.
.IP \(bu
\fBclass\fR returns the name of the class providing the
currently executing method implementation\&. The returned
method-providing class may be different to the class of the current
object\&. If called from within a method implementation provided by the
current object itself, an empty string is returned\&.
.IP \(bu
\fBfilterreg\fR returns the object (class) on which the
currently executing method was registered as a filter method (only
available from within filter methods)\&.
.IP \(bu
\fBisnextcall\fR will return 1, if the currently executing
method implementation was invoked via \fBnx::next\fR; 0 otherwise\&.
.IP \(bu
\fBlevel\fR will return a number indicating the stack
level of the currently executed method or script, or an empty string when
executed outside an NX context (e\&.g\&., in a Tcl proc or a namespace
script)\&. The resulting value can be directly passed as \fIlevel\fR to
\fBinfo level\fR\&.
.IP \(bu
\fBmethod\fR returns the name of the currently executing
method\&. If an ensemble-method call, the name of the bottom-most
("leaf") method is returned\&.
.IP \(bu
\fBmethodpath\fR returns the combined name of the
currently executing method (including all ensemble levels) in an
ensemble-method call\&. Otherwise, for a regular method call, the result
corresponds to the result of option \fBmethod\fR\&.
.IP \(bu
\fBnextmethod\fR returns the name of the next most
specific method implementation to be called when invoking \fBnx::next\fR\&.
.IP \(bu
\fBobject\fR gives the name of the object on which the
currently executing method implementation is evaluated\&.
.RE
.PP
.SH COPYRIGHT
.nf
Copyright (c) 2014-16 Stefan Sobernig <stefan\&.sobernig@wu\&.ac\&.at>, Gustaf Neumann <gustaf\&.neumann@wu\&.ac\&.at>; available under the Creative Commons Attribution 3\&.0 Austria license (CC BY 3\&.0 AT)\&.

.fi
